import json
import os

sorted_tiles = {}

with open("EternalFacadeTiles.json") as tile_data:
    tiles = json.load(tile_data)

    for tile in tiles['frames']:
        fname_segments = tile['filename'].split('/')
        numSegments = len(fname_segments)

        if not fname_segments[numSegments - 2] in sorted_tiles:
            sorted_tiles[fname_segments[numSegments - 2]] = []

        sorted_tiles[fname_segments[numSegments - 2]].append(tile)

    for key, values in sorted_tiles.items():
        first_item = values[0]
        tmp_segments = first_item['filename'].split('/')
        num_tmpSegments = len(tmp_segments)
        n_file_path = ""

        for x in range(0, num_tmpSegments - 1):
            n_file_path += tmp_segments[x] + "/"

        if n_file_path != '':
            if not os.path.exists(n_file_path):
                os.makedirs(n_file_path)

        file_name = tmp_segments[num_tmpSegments - 2] + ".hpp"

        with open(os.path.join(n_file_path, file_name), 'a') as py_file:
            py_file.write("/**\n")
            py_file.write("  * This has been auto-generated by ParseTileSheetData Python App \n")
            py_file.write("  * Author Tyler Wilson <bearmetal@att.net>\n")
            py_file.write("  */ \n\n\n\n")

            py_file.write("#ifndef " + tmp_segments[num_tmpSegments - 2].upper() + "_HPP\n")
            py_file.write("#define " + tmp_segments[num_tmpSegments - 2].upper() + "_HPP\n\n")
            py_file.write("#include <SFML/System/Vector2.hpp>\n\n")

            for i in range(0, len(values)):
                fname_segments = values[i]['filename'].split('/')
                numSegments = len(fname_segments)

                tile_x = int(sorted_tiles[key][i]["frame"]["x"])
                tile_y = int(sorted_tiles[key][i]["frame"]["y"])

                py_file.write("const sf::Vector2<int> " + fname_segments[numSegments - 1].split('.')[0].replace('-', '_').upper() + " = sf::Vector2<int>(" + str(tile_x) + ", " + str(tile_y) + ");\n")

            py_file.write("\n\n")
            py_file.write("#endif /* " + tmp_segments[num_tmpSegments - 2].upper() + "_HPP */")
